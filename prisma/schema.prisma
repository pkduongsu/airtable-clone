// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum ColumnType {
    TEXT
    NUMBER
}



// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@index([userId])
    @@index([expires])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bases         Base[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//for creating bases, tables and rows
model Base {
    id String @id @default(cuid())
    name String

    userId String
    user         User     @relation(fields: [userId], references: [id])

    tables Table[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Table {
    id String @id @default(cuid())
    name String 
    baseId String 
    base Base @relation(fields: [baseId], references:[id])

    rows Row[]
    columns Column[]
    views View[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Column {
  id       String     @id @default(cuid())
  tableId  String
  table    Table      @relation(fields: [tableId], references: [id])
  name     String
  type     ColumnType
  order    Int
  width    Int        @default(150)
  cells    Cell[]
}

model Row {
  id       String   @id @default(cuid())
  tableId  String
  table    Table    @relation(fields: [tableId], references: [id])
  order    Int  //row index
  cells    Cell[]
  
  @@index([tableId, order])
}

model Cell {
  id       String  @id @default(cuid())
  rowId    String
  row      Row     @relation(fields: [rowId], references: [id])
  columnId String
  column   Column  @relation(fields: [columnId], references: [id])
  value    Json?   // Store different types as JSON
  
  @@unique([rowId, columnId])
  @@index([rowId])
  @@index([columnId])
}

model View {
  id        String       @id @default(cuid())
  tableId   String
  table     Table        @relation(fields: [tableId], references: [id])
  name      String
  config    Json         // Stores filters, sorts, hidden columns
  isDefault Boolean      @default(false)
  createdAt DateTime     @default(now())

  @@index([tableId])
}